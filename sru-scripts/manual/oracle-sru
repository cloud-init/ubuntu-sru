#!/bin/bash
# Manual Oracle upgrade and clean install validation
set -ex -o pipefail
hash jq

SRU_VARS=./sru-scripts/sru-vars.template

if [ ! -f $SRU_VARS ]; then
   echo "Missing config environment file $SRU_VARS."
   exit 1
fi

. $SRU_VARS

parse_args $0 $@
assert_expected_vars PROPOSED_SCRIPT SAMPLE_CLOUDCONFIG LP_USER SSHOPTS \
    NETCFG_FILE OCI_COMPARTMENT_ID
create_samplecloudconfig SAMPLE_CLOUDCONFIG
create_setup_proposed_script

declare -A releases
releases=( ["xenial"]="16.04" ["bionic"]="18.04" ["focal"]="20.04" )
if [ -z "${releases[${UBUNTU_RELEASE}]}" ]; then
    echo "Invalid release specified $UBUNTU_RELEASE"
    exit 1
fi

function cleanup {
    echo "Cleaning up instance ${INSTANCE_ID}"
    oci compute instance terminate --force --instance-id="${INSTANCE_ID}"
}

echo "### BEGIN $UBUNTU_RELEASE"

IMAGE_ID=$(oci compute image list --compartment-id="$OCI_COMPARTMENT_ID" --operating-system="Canonical Ubuntu" --operating-system-version="${releases[${UBUNTU_RELEASE}]}" --sort-by="TIMECREATED" --limit=1 2>/dev/null | jq -r '.data[0]["id"]')
VCN_ID=$(oci network vcn list --compartment-id="$OCI_COMPARTMENT_ID" | jq -r '.data[0]["id"]')
SUBNET_INFO=$(oci network subnet list --compartment-id="$OCI_COMPARTMENT_ID" --vcn-id="${VCN_ID}" | jq '.data[0] | {id: .id, "availability-domain": ."availability-domain"}')
SUBNET_ID=$(echo ${SUBNET_INFO} | jq -r '.id')
AVAILABILITY_DOMAIN=$(echo ${SUBNET_INFO} | jq -r '."availability-domain"')

INSTANCE_ID=$(oci compute instance launch --compartment-id="$OCI_COMPARTMENT_ID" --availability-domain="${AVAILABILITY_DOMAIN}" --shape="VM.Standard1.1" --image-id="${IMAGE_ID}" --subnet-id="${SUBNET_ID}" --ssh-authorized-keys-file="${SSH_KEY}" | jq -r '.data["id"]')

trap cleanup EXIT

status=$(oci compute instance get --instance-id="${INSTANCE_ID}" | jq -r '.data."lifecycle-state"')
while [ "${status}" != "RUNNING" ]; do
    sleep 5
    status=$(oci compute instance get --instance-id="${INSTANCE_ID}" | jq -r '.data."lifecycle-state"')
done

VM_IP=$(oci compute instance list-vnics --instance-id="${INSTANCE_ID}" | jq -r '.["data"][0]["public-ip"]')

retry_ssh_command ubuntu@$VM_IP "cloud-init status --wait --long"

# Capture current state
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- dpkg-query --show cloud-init
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- sudo cat /run/cloud-init/result.json
# Expecting OpenStack datasource to have two Traces one related to Oracle's lack of support of stock OpenStack datasource
# "meta-data" route and one related to EphemeralDCHP falling over because the ip route already exists (due to iscsi_root)
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- ! grep Trace /var/log/cloud-init.log || true
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- systemd-analyze
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- systemd-analyze blame
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- cloud-init analyze show
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- cloud-init analyze blame
echo 'Networking config'
# Networking is disabled on bionic
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- cat $NETCFG_FILE || true

# Upgrade to -proposed cloud-init and reboot
scp "${SSHOPTS[@]}" ${PROPOSED_SCRIPT} ubuntu@$VM_IP:.
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP sudo bash ${PROPOSED_SCRIPT} 2>&1 | egrep 'cloud-init'
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- dpkg-query --show cloud-init
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- sudo hostname SRU-didnt-work
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- sudo rm -f $NETCFG_FILE
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- sudo cloud-init clean --logs --reboot || true
ssh-keygen -f "${HOME}/.ssh/known_hosts" -R $VM_IP

sleep 10  # Wait for the instance to actually go down
while ! ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- cloud-init status --wait --long; do
    sleep 1
done

ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- hostname
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- ! grep Trace /var/log/cloud-init.log || true
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- systemd-analyze
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- systemd-analyze blame
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- cloud-init analyze show
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- cloud-init analyze blame
echo 'After upgrade Networking config'
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- cat $NETCFG_FILE || true
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- cloud-init query --format "'cloud-region: {{cloud_name}}-{{region}}'"
echo "Get cloud-id"
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- cloud-id
echo 'Validating whether metadata is being updated per boot LP:1819913'
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- "grep 'Update datasource' /var/log/cloud-init.log"
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- sudo reboot || true

sleep 10  # Wait for the instance to actually go down
while ! ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- cloud-init status --wait --long; do
    sleep 1
done
echo 'After reboot'
ssh "${SSHOPTS[@]}" ubuntu@$VM_IP -- "grep 'Update datasource' /var/log/cloud-init.log"
oci compute instance terminate --force --instance-id="${INSTANCE_ID}"
echo "### END $UBUNTU_RELEASE"

