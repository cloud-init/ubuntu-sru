# This file is sourced by all manual SRU cloud tests
# It relies on user-specific variable overrides in SRU_VARS_RC.
# Set the variables accordingly for your cloud configuration and usernames

PRESERVE_INSTANCE=false   # can be set as cmdline param
UBUNTU_RELEASE=""         # The release to test specfied as cmdline param
LP_USER="UNSET"            # specify your launchpad username
PROPOSED_SCRIPT=setup_proposed.sh

USE_DEV_PPA=0  # set to 1 to use ppa:cloud-init-dev/proposed

ENI_NETCFG_FILE="/etc/network/interfaces.d/50-cloud-init.cfg"
NETPLAN_NETCFG_FILE="/etc/netplan/50-cloud-init.yaml"

SAMPLE_CLOUDCONFIG="sethostname.yaml"
# Key used to interact with cloud-instances
SSH_KEY="$HOME/.ssh/id_rsa.pub"

SSHOPTS=( -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR )

AZURE_REGION="UNSET"          # specify your region name
AZURE_VNET_NAME="UNSET"       # specify your virtual network name
AZURE_NETWORK_SECURITY_GROUP="UNSET" # specify your network security group
AZURE_NIC_NAME="UNSET"        # specify a preferred nic name
AZURE_RESOURCE_GROUP="UNSET"  # specify your resource group
AZURE_BOOT_DIAG="UNSET"       # your boot diagnostics group: bootdiag
AZURE_ADVANCED_NIC_TESTS=true  # set false to avoid time-consuming test setup

GCE_ZONE="UNSET"              # specify preferred zone: us-central1-b

OPENSTACK_ADMIN_NET_ID="UNSET" # your openstack admin net on serverstack
OPENSTACK_SSH_KEY_NAME="UNSET" # your openstack ssh key name on serverstack

OCI_COMPARTMENT_ID="UNSET"  # specify your compartment id

# Define custom values for the above variables in ~/.sru-vars.rc
SRU_VARS_RC=.sru-vars.rc
if [ -f $SRU_VARS_RC ]; then
    . ./$SRU_VARS_RC
elif [ -f $HOME/$SRU_VARS_RC ]; then
    . $HOME/$SRU_VARS_RC
else
    echo "Error: did not find $SRU_VARS_RC SRU testing overrides in working dir of $HOME"
    exit 1
fi


create_samplecloudconfig(){
    filename=${1:-${SAMPLE_CLOUDCONFIG}}
        cat > sethostname.yaml <<EOF
## template: jinja
#cloud-config
ssh_import_id: [$LP_USER]
hostname: SRU-worked-{{v1.cloud_name}}
EOF
}


create_setup_proposed_script(){
    if [ "${USE_DEV_PPA:-0}" -eq "0" ]; then
        cat > $PROPOSED_SCRIPT <<EOF
#/bin/bash
mirror=http://archive.ubuntu.com/ubuntu
echo deb \$mirror \$(lsb_release -sc)-proposed main | tee /etc/apt/sources.list.d/proposed.list
apt-get update -q;
apt-get install -qy cloud-init;
EOF
    else
        cat > $PROPOSED_SCRIPT <<EOF
#/bin/bash
add-apt-repository ppa:cloud-init-dev/proposed -y
apt-get update -q;
apt-get install -qy cloud-init;
EOF
    fi
}


# Assert expected vars are set for a cloud
assert_expected_vars(){
    local value=""
    for var in $@; do
        # $var is a string of a variable name to check. Use eval to set $value
        # to actual value of the variable name $var
        eval "value=\$$var > /dev/null"
        if [ -z "${value}" -o "${value}" = "UNSET" ]; then
            echo "Error: expected ${var} in $SRU_VARS_RC"
            exit 1
        fi
    done
}

usage_error(){
    script=$1
    msg=$2
    [ -z "${2}" ] || echo ${2}
    echo "Usage: $script <ubuntu_release> [--preserve-instance]"
    exit 1
}

parse_args(){
    script=$1; shift;

    [ $# = 0 ] && usage_error $script "missing required <ubuntu_release> param"

    while [ $# -ne 0 ]; do
        case "$1" in
            # any flag pass through.
            --preserve-instance) PRESERVE_INSTANCE=true;;
            xenial)
                UBUNTU_RELEASE=$1
                NETCFG_FILE=$ENI_NETCFG_FILE;;
            bionic|eoan|focal)
                UBUNTU_RELEASE=$1
                NETCFG_FILE=$NETPLAN_NETCFG_FILE;;
            --) shift; break;;
           *) echo "Invalid ubuntu_release provided: $1"; exit 1;;
        esac
        shift;
    done
    if [ -z "${UBUNTU_RELEASE}" ]; then
        usage_error $script "no valid <ubuntu_release> param found"
    fi
}

retry_ssh_command(){
  local vm_ip=$1 cmd=$2 sleep_seconds=${3:-5}
  while ! ssh "${SSHOPTS[@]}" $vm_ip -- $cmd; do
      sleep $sleep_seconds
  done
}
